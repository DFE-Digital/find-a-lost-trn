name: Backup AKS Database
description: backs up AKS database to Azure Storage

inputs:
  environment:
    description: "The name of the environment"
    required: true
  azure-client-id:
    description: Azure Client ID for authentication
    required: true
  azure-tenant-id:
    description: Azure Tenant ID for authentication
    required: true
  azure-subscription-id:
    description: Azure Subscription ID for authentication
    required: true

outputs:
  backup_artifact:
    description: "The backup artifact name"
    value: ${{ inputs.environment }}-backup

runs:
  using: composite

  steps:
    - uses: actions/checkout@v4
      id: Checkout

    - name: Prepare application environment
      uses: ./.github/actions/prepare-app-env

    - name: Set KV environment variables
      shell: bash
      id: set_kv_env_vars
      run: |
        tf_vars_file=terraform/aks/workspace_variables/${{ inputs.environment }}.tfvars.json
        cat $tf_vars_file
        INF_VAULT_NAME=$(jq -r '.inf_vault_name' ${tf_vars_file})
        NAMESPACE=$(jq -r '.namespace' ${tf_vars_file})
        APP_ENVIRONMENT=$(jq -r '.app_environment' ${tf_vars_file})
        CLUSTER=$(jq -r '.cluster' ${tf_vars_file})

        echo "INF_VAULT_NAME=$INF_VAULT_NAME" >> $GITHUB_ENV
        echo "NAMESPACE=$NAMESPACE" >> $GITHUB_ENV
        echo "CLUSTER=$CLUSTER" >> $GITHUB_ENV
        echo "APP_ENVIRONMENT=$APP_ENVIRONMENT" >> $GITHUB_ENV

        echo "envs are:  ${{ env.INF_VAULT_NAME }} ${{ env.NAMESPACE }}  ${{ env.APP_ENVIRONMENT }}  ${{ env.CLUSTER }}"

    - uses: Azure/login@v2
      with:
        client-id: ${{ inputs.azure-client-id }}
        tenant-id: ${{ inputs.azure-tenant-id }}
        subscription-id: ${{ inputs.azure-subscription-id }}

    - name: Fetch slack web hook
      uses: azure/CLI@v1
      id: slack-web-hook
      with:
        inlineScript: |
          SECRET_VALUE=$(az keyvault secret show --name "SLACK-WEBHOOK" --vault-name "${{ env.INF_VAULT_NAME }}" --query "value" -o tsv)
          echo "::add-mask::$SECRET_VALUE"
          echo "SLACK-WEBHOOK=$SECRET_VALUE" >> $GITHUB_OUTPUT

    - uses: DFE-Digital/github-actions/set-kubelogin-environment@master
      with:
        azure-client-id: ${{ inputs.azure-client-id }}
        azure-tenant-id: ${{ inputs.azure-tenant-id }}
        azure-subscription-id: ${{ inputs.azure-subscription-id }}

    - name: Install kubectl
      uses: DFE-Digital/github-actions/set-kubectl@master

    - name: Get environment variables
      shell: bash
      run: |
        test_cluster_rg=s189t01-tsc-ts-rg
        test_cluster_name=s189t01-tsc-test-aks
        production_cluster_rg=s189p01-tsc-pd-rg
        production_cluster_name=s189p01-tsc-production-aks
        BACKUP_FILE_NAME=faltrn_${{ inputs.environment }}_$(date +"%F")
        echo "BACKUP_FILE_NAME=$BACKUP_FILE_NAME" >> $GITHUB_ENV

        case "${{ inputs.environment }}" in
        development)
            echo "cluster_rg=$test_cluster_rg" >> $GITHUB_ENV
            echo "cluster_name=$test_cluster_name" >> $GITHUB_ENV
            echo "app_name=find-a-lost-trn-development" >> $GITHUB_ENV
            echo "storage_account=s189t01faltrndbbkpdvsa" >> $GITHUB_ENV
            ;;
        test)
            echo "cluster_rg=$test_cluster_rg" >> $GITHUB_ENV
            echo "cluster_name=$test_cluster_name" >> $GITHUB_ENV
            echo "app_name=find-a-lost-trn-test" >> $GITHUB_ENV
            echo "storage_account=s189t01faltrndbbkptssa" >> $GITHUB_ENV
            ;;
        preproduction)
            echo "cluster_rg=$test_cluster_rg" >> $GITHUB_ENV
            echo "cluster_name=$test_cluster_name" >> $GITHUB_ENV
            echo "app_name=find-a-lost-trn-preproduction" >> $GITHUB_ENV
            echo "storage_account=s189t01faltrndbbkpppsa" >> $GITHUB_ENV
            ;;
        production)
            echo "cluster_rg=$production_cluster_rg" >> $GITHUB_ENV
            echo "cluster_name=$production_cluster_name" >> $GITHUB_ENV
            echo "app_name=find-a-lost-trn-production" >> $GITHUB_ENV
            echo "storage_account=s189p01faltrndbbkppdsa" >> $GITHUB_ENV
            ;;
        *)
            echo "unknown cluster"
            ;;
        esac

    - uses: DFE-Digital/github-actions/set-kubectl@master

    - name: K8 setup
      shell: bash
      run: |
        make ci ${{ inputs.environment }} get-cluster-credentials
        make bin/konduit.sh

    - name: Setup postgres client
      uses: DFE-Digital/github-actions/install-postgres-client@master

    - name: Set environment variable
      shell: bash
      run: |
        BACKUP_FILE_NAME=faltrn_${{ inputs.environment }}_$(date +"%F")

    - name: Backup ${{ inputs.environment }} DB
      shell: bash
      run: |
        bin/konduit.sh -n ${{ env.NAMESPACE }} find-a-lost-trn-${{ inputs.environment }} -- pg_dump -E utf8 --clean --if-exists --no-owner --verbose --no-password -f ${BACKUP_FILE_NAME}.sql
        tar -cvzf ${BACKUP_FILE_NAME}.tar.gz ${BACKUP_FILE_NAME}.sql

    - name: Set Connection String
      shell: bash
      run: |
        STORAGE_CONN_STR="$(az keyvault secret show --name FALTRN-BACKUP-STORAGE-KEY-AKS --vault-name ${{ env.INF_VAULT_NAME }} | jq -r .value)"
        echo "::add-mask::$STORAGE_CONN_STR"
        echo "STORAGE_CONN_STR=$STORAGE_CONN_STR" >> $GITHUB_ENV

    - name: Upload Backup to Azure Storage
      shell: bash
      run: |
        az storage blob upload --account-name ${{ env.storage_account }} --container-name database-backup \
        --file ${{ env.BACKUP_FILE_NAME }}.tar.gz --name ${{ env.BACKUP_FILE_NAME }}.tar.gz --overwrite \
        --account-key '${{ env.STORAGE_CONN_STR }}'

    - name: Remove backup file
      shell: bash
      run: |
        rm ${{ env.BACKUP_FILE_NAME }}.sql
        rm ${{ env.BACKUP_FILE_NAME }}.tar.gz

    - name: Check for Failure
      if: ${{ failure() }}
      uses: rtCamp/action-slack-notify@master
      env:
        SLACK_USERNAME: CI Deployment
        SLACK_TITLE: Database backup failure
        SLACK_MESSAGE: ${{ inputs.environment }} database backup job failed
        SLACK_WEBHOOK: ${{ steps.slack-web-hook.outputs.SLACK-WEBHOOK }}
        SLACK_COLOR: failure
        SLACK_FOOTER: Sent from backup job in database-backup workflow
