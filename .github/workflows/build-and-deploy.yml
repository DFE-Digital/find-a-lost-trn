name: Deploy

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main
    types:
      - labeled
      - synchronize
      - reopened
      - opened
      - converted_to_draft

  workflow_dispatch:
    inputs:
      environment:
        description: "Environment"
        required: true
        type: choice
        options:
          - development
          - test
          - preproduction
          - production

env:
  CONTAINER_REGISTRY: ghcr.io

jobs:
  docker:
    name: Docker build and push
    if: contains(github.event.pull_request.labels.*.name, 'deploy') || github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    outputs:
      docker_image: ${{ steps.dockerimage.outputs.docker_image_tag }}
    steps:
      - name: Temp force failure
        run: |
          exit 1
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/actions/build-docker
        id: dockerimage
        with:
          github_username: ${{ github.actor }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

  deploy_review:
    name: Deploy to review environment
    concurrency: deploy_review_${{ github.event.pull_request.number }}
    needs: [docker]
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'deploy')
    environment:
      name: review

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/actions/deploy
        id: deploy
        with:
          environment: review
          docker_image: ${{ needs.docker.outputs.docker_image }}
          azure-credentials: ${{ secrets.AZURE_CREDENTIALS }}
          arm-access-key: ${{ secrets.ARM_ACCESS_KEY }}
          pr-id: ${{ github.event.pull_request.number }}

      - name: Post sticky pull request comment
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: |
            AKS review app deployed to https://find-a-lost-trn-review-pr-${{ github.event.pull_request.number }}.test.teacherservices.cloud

  set_matrix:
    name: Set deployment matrix
    runs-on: ubuntu-latest
    needs: [docker]
    outputs:
      deployment_matrix: ${{ steps.set_matrix.outputs.deployment_matrix }}
    steps:
      - id: set_matrix
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            DEPLOYMENT_MATRIX="{ 'environment': ['${{ github.event.inputs.environment }}'] }"
          else
            DEPLOYMENT_MATRIX="{ 'environment': ['development', 'test', 'preproduction'] }"
          fi
          echo "deployment_matrix=$DEPLOYMENT_MATRIX" >> $GITHUB_OUTPUT

  deploy_nonprod:
    name: Deploy to ${{ matrix.environment }} environment
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    concurrency: deploy_${{ matrix.environment }}
    needs: [docker, set_matrix]
    strategy:
      fail-fast: false # this is necessary to prevent early terminiation of terraform deployments that will result in tfstate locks
      max-parallel: 3
      matrix: ${{ fromJson(needs.set_matrix.outputs.deployment_matrix) }}
    environment:
      name: ${{ matrix.environment }}
      url: ${{ steps.deploy.outputs.environment_url }}
    outputs:
      environment_url: ${{ steps.deploy.outputs.environment_url }}
      environment_name: ${{ matrix.environment }}

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/actions/deploy
        id: deploy
        with:
          environment: ${{ matrix.environment }}
          docker_image: ${{ needs.docker.outputs.docker_image }}
          azure-credentials: ${{ secrets.AZURE_CREDENTIALS }}
          arm-access-key: ${{ secrets.ARM_ACCESS_KEY }}
      - uses: ./.github/workflows/actions/smoke-test
        id: smoke-test
        with:
          environment: ${{ matrix.environment }}
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}

  deploy_production:
    name: Deploy to production environment
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.environment_url }}
    concurrency: deploy_production
    needs: [docker, deploy_nonprod]

    outputs:
      environment_url: ${{ steps.deploy.outputs.environment_url }}
      environment_name: "production"

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/actions/deploy
        id: deploy
        with:
          environment: production
          docker_image: ${{ needs.docker.outputs.docker_image }}
          azure-credentials: ${{ secrets.AZURE_CREDENTIALS }}
          arm-access-key: ${{ secrets.ARM_ACCESS_KEY }}

  notify_slack_of_failures:
    name: Notify Slack of failures
    runs-on: ubuntu-latest
    needs: [docker, deploy_nonprod, deploy_production]
    environment: ${{ needs.deploy_production.outputs.environment_name || needs.deploy_nonprod.outputs.environment_name || 'unknown'}}
    env:
      ENVIRONMENT_NAME: ${{ needs.deploy_production.outputs.environment_name || needs.deploy_nonprod.outputs.environment_name }}
    if: failure()
    steps:
      - uses: actions/checkout@v4

      - name: Set Environment variables
        shell: bash
        working-directory: terraform
        run: |
          if ${{ needs.docker.result == 'failure' }}
          then
            job=docker
          elif ${{ needs.deploy_nonprod.result == 'failure' }}
          then
            job=deploy_nonprod
          elif ${{ needs.deploy_production.result == 'failure' }}
          then
            job=deploy_production
          fi
          tf_vars_file=aks/config/${{ env.ENVIRONMENT_NAME }}.tfvars.json
          echo "KEY_VAULT_NAME=$(jq -r '.inf_vault_name' ${tf_vars_file})" >> $GITHUB_ENV
          echo "JOB=${job}" >> $GITHUB_ENV

      - uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Fetch slack web hook
        uses: azure/CLI@v1
        id: slack-web-hook
        with:
          inlineScript: |
            SECRET_VALUE=$(az keyvault secret show --name "SLACK-WEBHOOK" --vault-name "${{ env.KEY_VAULT_NAME }}" --query "value" -o tsv)
            echo "::add-mask::$SECRET_VALUE"
            echo "SLACK_WEBHOOK=$SECRET_VALUE" >> $GITHUB_OUTPUT

      - name: Notify Slack channel on job failure
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_USERNAME: CI Deployment
          SLACK_TITLE: Deployment of Find a lost TRN failed
          SLACK_MESSAGE: Job ${{ env.JOB }} failed
          SLACK_WEBHOOK: ${{ steps.slack-web-hook.outputs.SLACK_WEBHOOK }}
          SLACK_COLOR: failure
          SLACK_FOOTER: Sent from Build and Deploy workflow
