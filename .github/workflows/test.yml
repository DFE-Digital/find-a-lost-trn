name: Test

on:
  push:
    branches:
      - '**'

env:
  CONTAINER_REGISTRY: ghcr.io

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    outputs:
      docker_image: ${{ steps.image.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Prepare application environment
        uses: ./.github/actions/prepare-app-env

      - name: Build frontend
        run: yarn build && yarn build:css

      - name: Run tests
        run: bundle exec rspec --format documentation

      - name: Docker image tag
        id: image
        run: |
          echo ::set-output name=tag::$CONTAINER_REGISTRY/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]'):$GITHUB_SHA

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker build & push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.image.outputs.tag }}
          secrets: |
            "test=${{ secrets.TEST }}"

  validate_terraform:
    name: Validate Terraform
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.10

      - name: Check formatting
        run: terraform fmt -check
        working-directory: terraform

      - name: Validate
        run: |
          terraform init -backend=false
          terraform validate -no-color
        working-directory: terraform

  deploy_dev:
    name: Deploy to dev environment
    needs: [build, validate_terraform]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.draft == false
    environment:
      name: dev
      url: ${{ steps.deploy.outputs.environment_url }}
    concurrency: deploy_dev

    outputs:
      environment_url: ${{ steps.deploy.outputs.environment_url }}

    steps:
      - uses: actions/checkout@v2

      - uses: ./.github/workflows/actions/deploy-environment
        id: deploy
        with:
          environment_name: dev
          docker_image: ${{ needs.build.outputs.docker_image }}
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
          terraform_vars: workspace_variables/dev.tfvars.json

  deploy_preprod:
    name: Deploy to preprod environment
    needs: [build, deploy_dev]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: preprod
      url: ${{ steps.deploy.outputs.environment_url }}
    concurrency: deploy_preprod

    outputs:
      environment_url: ${{ steps.deploy.outputs.environment_url }}

    steps:
      - uses: actions/checkout@v2

      - uses: ./.github/workflows/actions/deploy-environment
        id: deploy
        with:
          environment_name: preprod
          docker_image: ${{ needs.build.outputs.docker_image }}
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
          terraform_vars: workspace_variables/preprod.tfvars.json

  deploy_production:
    name: Deploy to production environment
    needs: [build, deploy_preprod]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.environment_url }}
    concurrency: deploy_production

    outputs:
      environment_url: ${{ steps.deploy.outputs.environment_url }}

    steps:
      - uses: actions/checkout@v2

      - uses: ./.github/workflows/actions/deploy-environment
        id: deploy
        with:
          environment_name: production
          docker_image: ${{ needs.build.outputs.docker_image }}
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
          terraform_vars: workspace_variables/production.tfvars.json
